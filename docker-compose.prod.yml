version: '3.8'

services:
  frontend:
    image: ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}
    container_name: ${FRONTEND_CONTAINER_NAME}
    env_file:
      - .env
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - 80:80
    volumes:
      # - ./frontend/public:/app/public
      # - ./frontend/src:/app/src
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - rhub-network
    depends_on:
      - backend

  backend:
    image: ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    container_name: ${BACKEND_CONTAINER_NAME}
    env_file:
      - .env
    build:
      context: ./backend
    ports:
      - 8080:8080
    volumes:
      - uploads_volumes:/app/uploads
    networks:
      - rhub-network
    depends_on:
      - db

  db:
    image: postgres:16.1-alpine3.19
    container_name: ${DATABASE_CONTAINER_NAME}
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - db_volumes:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - rhub-network

networks:
  rhub-network:
    driver: bridge

volumes:
  db_volumes: {}
  uploads_volumes: {}
